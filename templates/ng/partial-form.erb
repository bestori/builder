<% 
default_namefield = nil
singlename = singular_table_name
columns = schema['columns']

rejected_columns = ['id','updated_at','updated_by' ]

columns.each_pair do |name,column| 
  # get the name of the first field that is not called 'id' as default  
  if default_namefield.nil? && name != 'id'  && name !~ /_id/  
    # use this column unless it is the id primary key or a foreign key
    default_namefield = column
  end 
end 

# determine the display field names
namefield = columns['name'] || columns['title'] || default_namefield
descfield = columns['description'] || columns['info'] || 
  columns['summary'] || columns['comment'] || columns['snippet']
%>

<style type="text/css">
  .css-form input.ng-invalid.ng-dirty {
    background-color: #FA787E;
  }

  .css-form input.ng-valid.ng-dirty {
    background-color: #78FA89;
  }

  .ng-valid 		{  }
  .ng-invalid 	{  }
  .ng-pristine 	{  }
  .ng-dirty 		{  }

  /* really specific css rules applied by angular */
  .ng-invalid-required 		{  }
  .ng-invalid-minlength 		{  }
  .ng-valid-max-length 		{  }
</style>

<!--
        enable if the class has a main image
<img ng-src="{{mainImageUrl}}" class="<%= singlename %>">
-->

<h1>{{<%= singlename %>.<%= namefield['column_name'] %>}}</h1>

<% unless descfield.nil? %>
  <p>{{<%= singlename %>.descfield['column_name']}}</p>
<% end %>

<!--          
        enable and rename accordingly if the class has an array of images
<ul class="<%= singlename %>-thumbs">
  <li ng-repeat="img in <%= singlename %>.images">
    <img ng-src="{{img}}" ng-click="setImage(img)">
  </li>
</ul>
-->

<!-- new or edit -->
<span><%= model_name.titleize %> </span>

<!-- SHOW ERROR/SUCCESS MESSAGES -->
<div id="messages">{{ message }}</div>

<!-- pass in the form and if our form is valid or invalid -->
<form name="<%= singlename %>Form" 
      ng-submit="processForm(<%= singlename %>,<%= singlename %>Form.$valid)" 
      novalidate> <!-- novalidate prevents HTML5 validation since angular will validate -->
        <% columns.reject{|column| rejected_columns.include?(column['name'])  }.each do |column| %>
    <div id="<%= column['name'] %>-group" class="form-group"
         ng-class="{ 'has-error' : <%= singlename %>Form.<%= column['name'] %>.$invalid && !<%= singlename %>Form.<%= column['name'] %>.$pristine && submitted }"
         >
      <label><%= column['name'].titleize %></label>
      <input type="text" name="<%= column['name'] %>" class="form-control" 
             placeholder="<%= column['comment'] %>" ng-model="<%= singlename %>.<%= column['name'] %>">
      <span class="help-block" 
            ng-show="<%= singlename %>Form.<%= column['name'] %>.$invalid && !<%= singlename %>Form.<%= column['name'] %>.$pristine">
        This value in this field is invalid
      </span>
      <span class="help-block" 
            ng-show="<%= singlename %>_errors.<%= column['name'] %>">
        {{ <%= singlename %>_errors.<%= column['name'] %> }}>
      </span>
    </div>
  <% end %>

  <button type="submit" class="btn btn-success btn-lg btn-block" 
          ng-disabled="<%= singlename %>Form.$invalid || isUnchanged(user) || submitted">
    <span class="glyphicon glyphicon-flash"></span> Submit!
  </button>
  <button ng-click="reset()" ng-disabled="isUnchanged(user)">RESET</button>
  <button ng-click="update(user)" ng-disabled="<%= singlename %>Form.$invalid || isUnchanged(user) || submitted">SAVE</button>
</form>

<!-- SHOW DATA FROM INPUTS AS THEY ARE BEING TYPED -->
<pre>
		{{ formData }}
</pre>