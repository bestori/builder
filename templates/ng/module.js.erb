'use strict';

<% 

# shorten the accessor name
singlename = singular_table_name
%>

/* module */

// model/service
/*
 * return an ngResource object with the default actions
 
{ 'get':    {method:'GET'},
    'save':   {method:'POST'},
    'query':  {method:'GET', isArray:true},
    'remove': {method:'DELETE'},
    'delete': {method:'DELETE'} };
 */ 
angular.module('<%= namespace || "mainapp" %>').factory('<%= model_name %>', ['$resource',
  function($resource){
    return $resource('<%= namespace.nil? ? "" : namespace + '/' %><%= plural_table_name %>/:<%= singlename %>Id.json', {}, {
      list: {method:'GET',  isArray:true, cache:true},
      update:   {method:'PUT'},
      range: {method:'GET',  isArray:true, cache:true}
    });
  }]);

// list controller
angular.module('<%= namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>ListCtrl', [ '$scope', '$filter', '<%= model_name %>', 
    function ($scope, $filter, <%= model_name %>) {
    
      $scope.reverse = false;
      $scope.itemsPerPage = 25;
      $scope.currentPage = 0;
      $scope.<%= plural_table_name %> = <%= model_name %>.list();
      
      $scope.orderProp = 'id';
      
      $scope.prevPage = function() {
        if ($scope.currentPage > 0) {
          $scope.currentPage--;
        }
      };

      $scope.prevPageDisabled = function() {
        return $scope.currentPage === 0 ? "disabled" : "";
      };

      $scope.pageCount = function() {
        return Math.ceil($scope.<%= plural_table_name %>.length/$scope.itemsPerPage)-1;
      };

      $scope.nextPage = function() {
        if ($scope.currentPage < $scope.pageCount()) {
          $scope.currentPage++;
        }
      };

      $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.pageCount() ? "disabled" : "";
      };
  
      
      /// end controller 
    }]);

  <%  
# add the belongs_to and has many related classes  
 classes = []
 schema['belongs_to'].flatten.uniq.each do |key|
   classes << key.to_model_name
 end
 
 schema['has_many'].flatten.uniq.each do |key|
   classes << key.to_model_name
 end
%>
  // detail controller
angular.module('<%= namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>DetailCtrl', [ '$scope',  '$routeParams',  '<%= model_name %>'
    <%= classes.size == 0 ? '' : ",'" + classes.join("','") + "'" %>
    , function($scope, $routeParams, <%= model_name %> <%= classes.size == 0 ? '' : "," + classes.join(",")  %>) {
      
      $scope.<%= singlename %> = <%= model_name %>.get({<%= singlename %>Id: $routeParams.<%= singlename %>Id});
      
      <%- if classes.size > 0 %>
        <%- classes.each do |class_name| %> 
          $scope.<%= class_name.tableize %> = <%= class_name %>.list();
        <% end %>
      <% end %>
    }]);
  
 // form controller
angular.module('<%= namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>FormCtrl', [ '$scope',  '$routeParams',  '<%= model_name %>'
    <%= classes.size == 0 ? '' : ",'" + classes.join("','") + "'" %>
    , function($scope, $routeParams, <%= model_name %> <%= classes.size == 0 ? '' : "," + classes.join(",")  %>) {
      
    // get the ranges for foreign keys    
      <%- if classes.size > 0 %>
        <%- classes.each do |class_name| %> 
          $scope.<%= class_name.tableize %> = <%= class_name %>.list();
        <% end %>
      <% end %>
      
      // process the form
      $scope.processForm = function(formData,isvalid) {
      
        $scope.submitted = true;
        
        if ($scope.<%= singlename %>.id == null) {
             <%= model_name %>.save({  },
            formData, function(data) {
              console.log(data);
              // bind success message to message
              $scope.message = data.message;
            },
            function(data) {
              console.log(data);
            
              $scope.<%= singlename %>_errors = data.errors;
              // bind error message to message
              $scope.message = data.message;
            
            }) ;
        } else {
            <%= model_name %>.update({ <%= singlename %>Id:$scope.<%= singlename %>.id },
            formData, function(data) {
              console.log(data);
              // bind success message to message
              $scope.message = data.message;
            },
            function(data) {
              console.log(data);
            
              $scope.<%= singlename %>_errors = data.errors;
              // bind error message to message
              $scope.message = data.message;
            
            }) ;
        
        }
      };
      
      // create a blank object to hold our form information or load the record
      // $scope will allow this to pass between controller and view
      if ($routeParams.<%= singlename %>Id == null) {
        $scope.<%= singlename %> = new <%= model_name %>();
      } else {
        $scope.<%= singlename %> = <%= model_name %>.get({<%= singlename %>Id: $routeParams.<%= singlename %>Id});
      }
      
    }]);
  
 