<% 
default_namefield = nil

schema['columns'].each_pair do |name,column| 
  # get the name of the first field that is not called 'id' as default  
  if default_namefield.nil? && name != 'id' && name !~ /_id/  
    # use this column unless it is the id primary key or a foreign key
    default_namefield = column
  end 
end 
namefield = schema['columns']['name'] || schema['columns']['title'] || default_namefield
%>

class <%= controller_name %> < ApplicationController
  before_action :set_<%= singular_table_name %>, only: [:show, :edit, :update, :destroy, :related, :bridged]
 
  def fields
    # get the fields for a table - not required as the view templates are generated for each table
    <%= schema['columns'].keys.collect.inspect %>
  end
  
  def range
    # get a named range from a table 
    values = <%= model_name %>.all
    values.each.collect{|item| [item.id,item.<%= namefield['column_name'] %>]}
  end
  
  def related
    # get the records that are related to an object instance by the named relation
    # - a one-to-many relationship the relation parameter holds the name of the related objects
    values = @<%= singular_table_name %>.send(params['relation'].to_sym)
  end
  
  def bridged
    # get the records that are related to an object instance by the named relation
    # via a bridging table i.e. user_groups - a many-to-many relationship
    # this is the same as the related method - we use Rails magic in the model to specify a through relation 
    # e.g User.rb  --> has_many :policies, through: :user_policies
    # sending the method :policies to the object will get the related policies via the user_policies table
    values = @<%= singular_table_name %>.send(params['relation'].to_sym)
  end

  
 def search
   @<%= plural_table_name %> = <%= model_name %>.where(:where => params[:where])
   
   @<%= plural_table_name %> = results.order(params[:order]) unless params[:order].nil?
   
   @<%= plural_table_name %> = results.limit(params[:limit]) unless params[:limit].nil?
   
   @<%= plural_table_name %> = results.offset(params[:offset]) unless params[:offset].nil?
   
 end
 
  # GET /<%= plural_table_name %>
  # GET /<%= plural_table_name %>.json
  def index
    @<%= plural_table_name %> = <%= model_name %>.all
  end

  # GET /<%= plural_table_name %>/1
  # GET /<%= plural_table_name %>/1.json
  def show
  end

  # GET /<%= plural_table_name %>/new
  def new
    @<%= singular_table_name %> = <%= model_name %>.new
  end

  # GET /<%= plural_table_name %>/1/edit
  def edit
  end

  # POST /<%= plural_table_name %>
  # POST /<%= plural_table_name %>.json
  def create
    @<%= singular_table_name %> = <%= model_name %>.new(<%= singular_table_name %>_params)

    respond_to do |format|
      if @<%= singular_table_name %>.save
        format.html { redirect_to @<%= singular_table_name %>, notice: '<%= model_name.titleize %> was successfully created.' }
        format.json { render json: message: '<%= model_name.titleize %> was successfully created.'  }
      else
        format.html { render action: 'new' }
        format.json { render json: {errors: @<%= singular_table_name %>.errors, 
            message '<%= model_name.titleize %> could not be created' }, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /<%= plural_table_name %>/1
  # PATCH/PUT /<%= plural_table_name %>/1.json
  def update
    respond_to do |format|
      if @<%= singular_table_name %>.update(<%= singular_table_name %>_params)
        format.html { redirect_to @<%= singular_table_name %>, notice: '<%= model_name.titleize %> was successfully updated.' }
        format.json { render json: message: '<%= model_name.titleize %> was successfully updated.'  }
      else
        format.html { render action: 'edit' }
        format.json { render json: {errors: @<%= singular_table_name %>.errors, 
            message '<%= model_name.titleize %> could not be updated' }, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /<%= plural_table_name %>/1
  # DELETE /<%= plural_table_name %>/1.json
  def destroy
    @<%= singular_table_name %>.destroy
    respond_to do |format|
      format.html { redirect_to <%= plural_table_name %>_url }
      format.json { render json: message: '<%= model_name.titleize %> was successfully deleted.'}
    end
  end
 
  private
    # Use callbacks to share common setup or constraints between actions.
    def set_<%= singular_table_name %>
      @<%= singular_table_name %> = <%= model_name %>.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def <%= singular_table_name %>_params
    <% 
      column_symbols = []
      schema['columns'].keys.reject{|key| ['created_at','updated_at','id'].include? key}.each do |key | 
        column_symbols << ":#{key}"
      end
    %>
      params.require(:<%= singular_table_name %>).permit( <%= column_symbols.join(', ') %>)
    end
end